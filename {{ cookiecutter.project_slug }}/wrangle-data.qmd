---
params:
  # path to stored counts data file
  counts_path: !expr here::here("data", "counts", "")
  # path to sample (meta)data
  samples_path: !expr here::here("data", "samples", "")
  # minimum count required for for low expression filtering. supplied to edgeR::filterByExpr
  min_count: 10
  # path to raw (unfiltered) SummarizedExperiment object
  se_raw_path: !expr here::here("data", "expression-analysis", "summarized-experiment-raw.rds")
  # path to filtered SummarizedExperiment object
  se_filt_path: !expr here::here("data", "expression-analysis", "summarized-experiment-filt.rds")
---

# Wrangle data, fit model, and extract results {.unnumbered}

```{r}
#| label: attach-packages-modules
#| code-summary: "Attach packages and modules"

# start w/ a clean session
box::purge_cache()

# attach packages
box::use(
  davizr[read_counts_file, write_se],
  DESeq2[rlogTransformation, varianceStabilizingTransformation],
  edgeR[filterByExpr],
  here[here],
  janitor[clean_names]
)

# attach local modules
options(box.path = here("src", "R"))
box::use()
```


## Read data

### Counts

Read counts data from file.

```{r}
#| label: read-counts
#| code-summary: "Read counts"

counts <- read_counts_file(params$counts_path)
```


### Samples

Read samples data from file.

```{r}
#| label: read-tidy-samples
#| code-summary: "Read and tidy blood samples data"

samples <- params$samples_path |>
  read.csv() |> 
  clean_names()
```


## Construct `SummarizedExperiment`

The `SummarizedExperiment` class is the class of choice for bulk RNA-seq analysis.
Essentially every major RNA-seq analysis workflow in R can work directly with objects of type `SummarizedExperiment`.

In this analysis, we use the `SummarizedExperiment` class as our singlular, ground truth data object.

```{r}
#| label: construct-summarized-experiment
#| code-summary: "Construct Summarized Experiment"

# construct SummarizedExperiment
se <- SummarizedExperiment(
  assays = list(counts = counts),
  colData = samples
)

# add library sizes to SummarizedExperiment
se[["lib_size_raw"]] <- colSums(assay(se, "counts"))
```


### Write `SummarizedExperiment`

```{r}
#| label: write-summarized-experiment
#| code-summary: Write `SummarizedExperiment`"

write_se(se, params$se_raw_path)
```


## Filter genes

Filter genes with low expression.

```{r}
#| label: filter-low-expression-genes
#| code-summary: "Filter low expression genes"

keep_exprs <- filterByExpr(se, group = se$group, min.count = params$min_count)
se_filt <- se[keep_exprs, ]

# compute library size for filtered SummarizedExperiment
se_filt[["lib_size_filt"]] <- colSums(assay(se_filt, "counts"))
```


Transform filtered counts.

```{r}
#| label: transform-filtered-counts
#| code-summary: "Transform filtered counts"

SummarizedExperiment::assay(se_filt, "rld") <- rlogTransformation(assay(se_filt, "counts"))
SummarizedExperiment::assay(se_filt, "vsd") <- varianceStabilizingTransformation(assay(se_filt, "counts"))
```


### Write `SummarizedExperiment`

```{r}
#| label: write-summarized-experiment-filt
#| code-summary: "Write filtered `SummarizedExperiment`"

write_se(se_filt, params$se_filt_path)
```
